// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto_push.proto

package push

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PushService service

func NewPushServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PushService service

type PushService interface {
	//应用通道配置
	PushVendorSave(ctx context.Context, in *PushVendorSaveReq, opts ...client.CallOption) (*PushVendorSaveRep, error)
	//cid上报
	CidUpload(ctx context.Context, in *CidUploadReq, opts ...client.CallOption) (*CidUploadRep, error)
	//单或批量推送
	PushToUdi(ctx context.Context, in *PushToUdiReq, opts ...client.CallOption) (*PushToUdiRep, error)
	//单或批量透传
	TranToUdi(ctx context.Context, in *TranToUdiReq, opts ...client.CallOption) (*TranToUdiRep, error)
}

type pushService struct {
	c    client.Client
	name string
}

func NewPushService(name string, c client.Client) PushService {
	return &pushService{
		c:    c,
		name: name,
	}
}

func (c *pushService) PushVendorSave(ctx context.Context, in *PushVendorSaveReq, opts ...client.CallOption) (*PushVendorSaveRep, error) {
	req := c.c.NewRequest(c.name, "PushService.PushVendorSave", in)
	out := new(PushVendorSaveRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushService) CidUpload(ctx context.Context, in *CidUploadReq, opts ...client.CallOption) (*CidUploadRep, error) {
	req := c.c.NewRequest(c.name, "PushService.CidUpload", in)
	out := new(CidUploadRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushService) PushToUdi(ctx context.Context, in *PushToUdiReq, opts ...client.CallOption) (*PushToUdiRep, error) {
	req := c.c.NewRequest(c.name, "PushService.PushToUdi", in)
	out := new(PushToUdiRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushService) TranToUdi(ctx context.Context, in *TranToUdiReq, opts ...client.CallOption) (*TranToUdiRep, error) {
	req := c.c.NewRequest(c.name, "PushService.TranToUdi", in)
	out := new(TranToUdiRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushService service

type PushServiceHandler interface {
	//应用通道配置
	PushVendorSave(context.Context, *PushVendorSaveReq, *PushVendorSaveRep) error
	//cid上报
	CidUpload(context.Context, *CidUploadReq, *CidUploadRep) error
	//单或批量推送
	PushToUdi(context.Context, *PushToUdiReq, *PushToUdiRep) error
	//单或批量透传
	TranToUdi(context.Context, *TranToUdiReq, *TranToUdiRep) error
}

func RegisterPushServiceHandler(s server.Server, hdlr PushServiceHandler, opts ...server.HandlerOption) error {
	type pushService interface {
		PushVendorSave(ctx context.Context, in *PushVendorSaveReq, out *PushVendorSaveRep) error
		CidUpload(ctx context.Context, in *CidUploadReq, out *CidUploadRep) error
		PushToUdi(ctx context.Context, in *PushToUdiReq, out *PushToUdiRep) error
		TranToUdi(ctx context.Context, in *TranToUdiReq, out *TranToUdiRep) error
	}
	type PushService struct {
		pushService
	}
	h := &pushServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PushService{h}, opts...))
}

type pushServiceHandler struct {
	PushServiceHandler
}

func (h *pushServiceHandler) PushVendorSave(ctx context.Context, in *PushVendorSaveReq, out *PushVendorSaveRep) error {
	return h.PushServiceHandler.PushVendorSave(ctx, in, out)
}

func (h *pushServiceHandler) CidUpload(ctx context.Context, in *CidUploadReq, out *CidUploadRep) error {
	return h.PushServiceHandler.CidUpload(ctx, in, out)
}

func (h *pushServiceHandler) PushToUdi(ctx context.Context, in *PushToUdiReq, out *PushToUdiRep) error {
	return h.PushServiceHandler.PushToUdi(ctx, in, out)
}

func (h *pushServiceHandler) TranToUdi(ctx context.Context, in *TranToUdiReq, out *TranToUdiRep) error {
	return h.PushServiceHandler.TranToUdi(ctx, in, out)
}
