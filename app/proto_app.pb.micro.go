// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto_app.proto

package app

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppService service

func NewAppServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppService service

type AppService interface {
	//新增应用信息
	AppAdd(ctx context.Context, in *AppRequest, opts ...client.CallOption) (*AppReply, error)
	//修改应用信息
	AppEdit(ctx context.Context, in *AppEditRequest, opts ...client.CallOption) (*AppReply, error)
	//获取应用信息
	AppGet(ctx context.Context, in *AppIdRequest, opts ...client.CallOption) (*AppReply, error)
	//应用列表
	AppPageList(ctx context.Context, in *AppPageReq, opts ...client.CallOption) (*AppPageRep, error)
}

type appService struct {
	c    client.Client
	name string
}

func NewAppService(name string, c client.Client) AppService {
	return &appService{
		c:    c,
		name: name,
	}
}

func (c *appService) AppAdd(ctx context.Context, in *AppRequest, opts ...client.CallOption) (*AppReply, error) {
	req := c.c.NewRequest(c.name, "AppService.AppAdd", in)
	out := new(AppReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) AppEdit(ctx context.Context, in *AppEditRequest, opts ...client.CallOption) (*AppReply, error) {
	req := c.c.NewRequest(c.name, "AppService.AppEdit", in)
	out := new(AppReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) AppGet(ctx context.Context, in *AppIdRequest, opts ...client.CallOption) (*AppReply, error) {
	req := c.c.NewRequest(c.name, "AppService.AppGet", in)
	out := new(AppReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) AppPageList(ctx context.Context, in *AppPageReq, opts ...client.CallOption) (*AppPageRep, error) {
	req := c.c.NewRequest(c.name, "AppService.AppPageList", in)
	out := new(AppPageRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppService service

type AppServiceHandler interface {
	//新增应用信息
	AppAdd(context.Context, *AppRequest, *AppReply) error
	//修改应用信息
	AppEdit(context.Context, *AppEditRequest, *AppReply) error
	//获取应用信息
	AppGet(context.Context, *AppIdRequest, *AppReply) error
	//应用列表
	AppPageList(context.Context, *AppPageReq, *AppPageRep) error
}

func RegisterAppServiceHandler(s server.Server, hdlr AppServiceHandler, opts ...server.HandlerOption) error {
	type appService interface {
		AppAdd(ctx context.Context, in *AppRequest, out *AppReply) error
		AppEdit(ctx context.Context, in *AppEditRequest, out *AppReply) error
		AppGet(ctx context.Context, in *AppIdRequest, out *AppReply) error
		AppPageList(ctx context.Context, in *AppPageReq, out *AppPageRep) error
	}
	type AppService struct {
		appService
	}
	h := &appServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppService{h}, opts...))
}

type appServiceHandler struct {
	AppServiceHandler
}

func (h *appServiceHandler) AppAdd(ctx context.Context, in *AppRequest, out *AppReply) error {
	return h.AppServiceHandler.AppAdd(ctx, in, out)
}

func (h *appServiceHandler) AppEdit(ctx context.Context, in *AppEditRequest, out *AppReply) error {
	return h.AppServiceHandler.AppEdit(ctx, in, out)
}

func (h *appServiceHandler) AppGet(ctx context.Context, in *AppIdRequest, out *AppReply) error {
	return h.AppServiceHandler.AppGet(ctx, in, out)
}

func (h *appServiceHandler) AppPageList(ctx context.Context, in *AppPageReq, out *AppPageRep) error {
	return h.AppServiceHandler.AppPageList(ctx, in, out)
}
