// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto_coin.proto

package coin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CoinService service

func NewCoinServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CoinService service

type CoinService interface {
	//金币余额
	CoinGet(ctx context.Context, in *CoinGetReq, opts ...client.CallOption) (*CoinGetRep, error)
	//增加金币
	CoinIncr(ctx context.Context, in *CoinIncrReq, opts ...client.CallOption) (*CoinIncrRep, error)
	//减少金币
	CoinDecr(ctx context.Context, in *CoinDecrReq, opts ...client.CallOption) (*CoinIncrRep, error)
	//用户最近7天金币变动列表
	CoinRecordListLast7Day(ctx context.Context, in *Coin7DayReq, opts ...client.CallOption) (*Coin7DayRep, error)
	//金币提现申请
	CoinWithDrawApply(ctx context.Context, in *CoinWithDrawApplyReq, opts ...client.CallOption) (*CoinWithDrawApplyRep, error)
	//用户提现列表
	CoinWithDrawList(ctx context.Context, in *CoinWithDrawListReq, opts ...client.CallOption) (*CoinWithDrawListRep, error)
	//提现撤销
	CoinWithDrawRevoke(ctx context.Context, in *CoinWithDrawRevokeReq, opts ...client.CallOption) (*CoinWithDrawRevokeRep, error)
	//提现分页列表
	CoinWithDrawPageList(ctx context.Context, in *CoinWithDrawPageListReq, opts ...client.CallOption) (*CoinWithDrawPageListRep, error)
	//提现同意
	CoinWithDrawAgree(ctx context.Context, in *CoinWithDrawAgreeReq, opts ...client.CallOption) (*CoinWithDrawAgreeRep, error)
	//提现拒绝
	CoinWithDrawRefuse(ctx context.Context, in *CoinWithDrawRefuseReq, opts ...client.CallOption) (*CoinWithDrawRefuseRep, error)
	//提现转账记录
	CoinTransferList(ctx context.Context, in *CoinTransferListReq, opts ...client.CallOption) (*CoinTransferListRep, error)
}

type coinService struct {
	c    client.Client
	name string
}

func NewCoinService(name string, c client.Client) CoinService {
	return &coinService{
		c:    c,
		name: name,
	}
}

func (c *coinService) CoinGet(ctx context.Context, in *CoinGetReq, opts ...client.CallOption) (*CoinGetRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinGet", in)
	out := new(CoinGetRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinIncr(ctx context.Context, in *CoinIncrReq, opts ...client.CallOption) (*CoinIncrRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinIncr", in)
	out := new(CoinIncrRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinDecr(ctx context.Context, in *CoinDecrReq, opts ...client.CallOption) (*CoinIncrRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinDecr", in)
	out := new(CoinIncrRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinRecordListLast7Day(ctx context.Context, in *Coin7DayReq, opts ...client.CallOption) (*Coin7DayRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinRecordListLast7Day", in)
	out := new(Coin7DayRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinWithDrawApply(ctx context.Context, in *CoinWithDrawApplyReq, opts ...client.CallOption) (*CoinWithDrawApplyRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinWithDrawApply", in)
	out := new(CoinWithDrawApplyRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinWithDrawList(ctx context.Context, in *CoinWithDrawListReq, opts ...client.CallOption) (*CoinWithDrawListRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinWithDrawList", in)
	out := new(CoinWithDrawListRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinWithDrawRevoke(ctx context.Context, in *CoinWithDrawRevokeReq, opts ...client.CallOption) (*CoinWithDrawRevokeRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinWithDrawRevoke", in)
	out := new(CoinWithDrawRevokeRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinWithDrawPageList(ctx context.Context, in *CoinWithDrawPageListReq, opts ...client.CallOption) (*CoinWithDrawPageListRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinWithDrawPageList", in)
	out := new(CoinWithDrawPageListRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinWithDrawAgree(ctx context.Context, in *CoinWithDrawAgreeReq, opts ...client.CallOption) (*CoinWithDrawAgreeRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinWithDrawAgree", in)
	out := new(CoinWithDrawAgreeRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinWithDrawRefuse(ctx context.Context, in *CoinWithDrawRefuseReq, opts ...client.CallOption) (*CoinWithDrawRefuseRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinWithDrawRefuse", in)
	out := new(CoinWithDrawRefuseRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) CoinTransferList(ctx context.Context, in *CoinTransferListReq, opts ...client.CallOption) (*CoinTransferListRep, error) {
	req := c.c.NewRequest(c.name, "CoinService.CoinTransferList", in)
	out := new(CoinTransferListRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoinService service

type CoinServiceHandler interface {
	//金币余额
	CoinGet(context.Context, *CoinGetReq, *CoinGetRep) error
	//增加金币
	CoinIncr(context.Context, *CoinIncrReq, *CoinIncrRep) error
	//减少金币
	CoinDecr(context.Context, *CoinDecrReq, *CoinIncrRep) error
	//用户最近7天金币变动列表
	CoinRecordListLast7Day(context.Context, *Coin7DayReq, *Coin7DayRep) error
	//金币提现申请
	CoinWithDrawApply(context.Context, *CoinWithDrawApplyReq, *CoinWithDrawApplyRep) error
	//用户提现列表
	CoinWithDrawList(context.Context, *CoinWithDrawListReq, *CoinWithDrawListRep) error
	//提现撤销
	CoinWithDrawRevoke(context.Context, *CoinWithDrawRevokeReq, *CoinWithDrawRevokeRep) error
	//提现分页列表
	CoinWithDrawPageList(context.Context, *CoinWithDrawPageListReq, *CoinWithDrawPageListRep) error
	//提现同意
	CoinWithDrawAgree(context.Context, *CoinWithDrawAgreeReq, *CoinWithDrawAgreeRep) error
	//提现拒绝
	CoinWithDrawRefuse(context.Context, *CoinWithDrawRefuseReq, *CoinWithDrawRefuseRep) error
	//提现转账记录
	CoinTransferList(context.Context, *CoinTransferListReq, *CoinTransferListRep) error
}

func RegisterCoinServiceHandler(s server.Server, hdlr CoinServiceHandler, opts ...server.HandlerOption) error {
	type coinService interface {
		CoinGet(ctx context.Context, in *CoinGetReq, out *CoinGetRep) error
		CoinIncr(ctx context.Context, in *CoinIncrReq, out *CoinIncrRep) error
		CoinDecr(ctx context.Context, in *CoinDecrReq, out *CoinIncrRep) error
		CoinRecordListLast7Day(ctx context.Context, in *Coin7DayReq, out *Coin7DayRep) error
		CoinWithDrawApply(ctx context.Context, in *CoinWithDrawApplyReq, out *CoinWithDrawApplyRep) error
		CoinWithDrawList(ctx context.Context, in *CoinWithDrawListReq, out *CoinWithDrawListRep) error
		CoinWithDrawRevoke(ctx context.Context, in *CoinWithDrawRevokeReq, out *CoinWithDrawRevokeRep) error
		CoinWithDrawPageList(ctx context.Context, in *CoinWithDrawPageListReq, out *CoinWithDrawPageListRep) error
		CoinWithDrawAgree(ctx context.Context, in *CoinWithDrawAgreeReq, out *CoinWithDrawAgreeRep) error
		CoinWithDrawRefuse(ctx context.Context, in *CoinWithDrawRefuseReq, out *CoinWithDrawRefuseRep) error
		CoinTransferList(ctx context.Context, in *CoinTransferListReq, out *CoinTransferListRep) error
	}
	type CoinService struct {
		coinService
	}
	h := &coinServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CoinService{h}, opts...))
}

type coinServiceHandler struct {
	CoinServiceHandler
}

func (h *coinServiceHandler) CoinGet(ctx context.Context, in *CoinGetReq, out *CoinGetRep) error {
	return h.CoinServiceHandler.CoinGet(ctx, in, out)
}

func (h *coinServiceHandler) CoinIncr(ctx context.Context, in *CoinIncrReq, out *CoinIncrRep) error {
	return h.CoinServiceHandler.CoinIncr(ctx, in, out)
}

func (h *coinServiceHandler) CoinDecr(ctx context.Context, in *CoinDecrReq, out *CoinIncrRep) error {
	return h.CoinServiceHandler.CoinDecr(ctx, in, out)
}

func (h *coinServiceHandler) CoinRecordListLast7Day(ctx context.Context, in *Coin7DayReq, out *Coin7DayRep) error {
	return h.CoinServiceHandler.CoinRecordListLast7Day(ctx, in, out)
}

func (h *coinServiceHandler) CoinWithDrawApply(ctx context.Context, in *CoinWithDrawApplyReq, out *CoinWithDrawApplyRep) error {
	return h.CoinServiceHandler.CoinWithDrawApply(ctx, in, out)
}

func (h *coinServiceHandler) CoinWithDrawList(ctx context.Context, in *CoinWithDrawListReq, out *CoinWithDrawListRep) error {
	return h.CoinServiceHandler.CoinWithDrawList(ctx, in, out)
}

func (h *coinServiceHandler) CoinWithDrawRevoke(ctx context.Context, in *CoinWithDrawRevokeReq, out *CoinWithDrawRevokeRep) error {
	return h.CoinServiceHandler.CoinWithDrawRevoke(ctx, in, out)
}

func (h *coinServiceHandler) CoinWithDrawPageList(ctx context.Context, in *CoinWithDrawPageListReq, out *CoinWithDrawPageListRep) error {
	return h.CoinServiceHandler.CoinWithDrawPageList(ctx, in, out)
}

func (h *coinServiceHandler) CoinWithDrawAgree(ctx context.Context, in *CoinWithDrawAgreeReq, out *CoinWithDrawAgreeRep) error {
	return h.CoinServiceHandler.CoinWithDrawAgree(ctx, in, out)
}

func (h *coinServiceHandler) CoinWithDrawRefuse(ctx context.Context, in *CoinWithDrawRefuseReq, out *CoinWithDrawRefuseRep) error {
	return h.CoinServiceHandler.CoinWithDrawRefuse(ctx, in, out)
}

func (h *coinServiceHandler) CoinTransferList(ctx context.Context, in *CoinTransferListReq, out *CoinTransferListRep) error {
	return h.CoinServiceHandler.CoinTransferList(ctx, in, out)
}
